buildscript {
    repositories {
        jcenter()
        mavenCentral()
    	mavenLocal()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.atlassian.clover:clover:4.1.1'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    jcenter()
    mavenCentral()
	mavenLocal()
}

task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
}

shadowJar {
	baseName = 'shadow'
	classifier = null
	version = null
}

jar {
    manifest {
        attributes 'Main-Class': 'jchess.JChessApp'
    }
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main']
		}
		resources {
			srcDirs = ['src/main']
		}
	}
	test {
		java {
			srcDirs = ['src/test']
		}
		resources {
			srcDirs = ['src/main']
		}
	}
	clover {
        java {
            srcDir "$buildDir/sources-instr"
        }
    }
}

dependencies {
    compile group: 'org.jdesktop', name: 'appframework', version: '1.0+'
    compile group: 'org.jdesktop', name: 'swing-worker', version: '1.1+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    cloverCompile 'com.atlassian.clover:clover:4.1.1'
}

configurations {
    cloverRuntime
    cloverRuntime.extendsFrom cloverCompile
}

task cloverInstr() {
    inputs.files sourceSets.main.allJava
    outputs.dir "$buildDir/sources-instr"
 
    doFirst {
        def argsList = ["--initstring", "${buildDir}/clover/clover.db",
                        "-d", "${buildDir}/sources-instr"]
        argsList.addAll(inputs.files.files.collect({ file ->
            file.absolutePath
        }))
        String[] args = argsList.toArray()
 
        com.atlassian.clover.CloverInstr.mainImpl(args)
    }
}
 
cloverClasses.dependsOn cloverInstr
  
test {
    def cloverClasspath = configurations.testRuntime + configurations.cloverRuntime + sourceSets.test.output + sourceSets.clover.output
    classpath = cloverClasspath
}

task cloverReport {
    inputs.dir "${buildDir}/clover"
    outputs.dir "${reportsDir}/clover"
    onlyIf {
        file("${buildDir}/clover/clover.db").exists()
    }
    doFirst {
        def argsList = ["--initstring", "${buildDir}/clover/clover.db",
                        "-o", "${reportsDir}/clover"]
        String[] args = argsList.toArray()
        com.atlassian.clover.reporters.html.HtmlReporter.runReport(args)
    }
}